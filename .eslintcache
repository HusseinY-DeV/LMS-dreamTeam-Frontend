[{"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/index.js":"1","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/App.js":"2","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/ProtectedRoute.js":"3","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Login/Login.js":"4","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/Sections.js":"5","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Report/Reports.js":"6","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/Admins.js":"7","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/Students.js":"8","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/Classes.js":"9","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/Drawer.js":"10","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/Row.js":"11","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/AddModal.js":"12","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/AddSuccessModal.js":"13","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/UpdateModal.js":"14","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/UpdateSuccessModal.js":"15","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/DeleteModal.js":"16","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/api/api.js":"17","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/DeleteSuccessModal.js":"18","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/Row.js":"19","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/Row.js":"20","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/api/api.js":"21","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/DeleteModal.js":"22","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/AddModal.js":"23","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/UpdateModal.js":"24","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/api/api.js":"25","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/UpdateSuccessModal.js":"26","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/AddSuccessModal.js":"27","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/DeleteSuccessModal.js":"28","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/api/api.js":"29","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/AddModal.jsx":"30","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/AddSuccessModal.jsx":"31","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/UpdateModal.jsx":"32","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/DeleteModal.jsx":"33","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/UpdateSuccessModal.jsx":"34","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/DeleteSuccessModal.jsx":"35","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/Row.js":"36","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/AddModal.jsx":"37","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/AddSuccessModal.jsx":"38","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/DeleteModal.jsx":"39","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/DeleteSuccessModal.jsx":"40","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/UpdateModal.jsx":"41","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/UpdateSuccessModal.jsx":"42","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/Search.jsx":"43","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/Search.jsx":"44","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/Search.jsx":"45","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/Search.jsx":"46"},{"size":141,"mtime":1610006876656,"results":"47","hashOfConfig":"48"},{"size":1165,"mtime":1611514085112,"results":"49","hashOfConfig":"48"},{"size":278,"mtime":1609920818565,"results":"50","hashOfConfig":"48"},{"size":124,"mtime":1609920818569,"results":"51","hashOfConfig":"48"},{"size":6347,"mtime":1611324170864,"results":"52","hashOfConfig":"48"},{"size":1500,"mtime":1609920818569,"results":"53","hashOfConfig":"48"},{"size":11660,"mtime":1611324254715,"results":"54","hashOfConfig":"48"},{"size":6480,"mtime":1611324180797,"results":"55","hashOfConfig":"48"},{"size":9899,"mtime":1610715348253,"results":"56","hashOfConfig":"48"},{"size":4834,"mtime":1611514043084,"results":"57","hashOfConfig":"48"},{"size":2152,"mtime":1610474982027,"results":"58","hashOfConfig":"48"},{"size":3937,"mtime":1609920818565,"results":"59","hashOfConfig":"48"},{"size":1546,"mtime":1609920818565,"results":"60","hashOfConfig":"48"},{"size":4004,"mtime":1610475910783,"results":"61","hashOfConfig":"48"},{"size":1569,"mtime":1609920818565,"results":"62","hashOfConfig":"48"},{"size":1801,"mtime":1609920818565,"results":"63","hashOfConfig":"48"},{"size":1317,"mtime":1610715187994,"results":"64","hashOfConfig":"48"},{"size":1572,"mtime":1609920818565,"results":"65","hashOfConfig":"48"},{"size":2802,"mtime":1610459445778,"results":"66","hashOfConfig":"48"},{"size":2022,"mtime":1610475151612,"results":"67","hashOfConfig":"48"},{"size":2136,"mtime":1610717066769,"results":"68","hashOfConfig":"48"},{"size":2817,"mtime":1610459445782,"results":"69","hashOfConfig":"48"},{"size":9694,"mtime":1610716754081,"results":"70","hashOfConfig":"48"},{"size":10588,"mtime":1610459445782,"results":"71","hashOfConfig":"48"},{"size":1485,"mtime":1610705544555,"results":"72","hashOfConfig":"48"},{"size":1711,"mtime":1610459445782,"results":"73","hashOfConfig":"48"},{"size":1678,"mtime":1610459445782,"results":"74","hashOfConfig":"48"},{"size":1586,"mtime":1610459445782,"results":"75","hashOfConfig":"48"},{"size":1823,"mtime":1610714069009,"results":"76","hashOfConfig":"48"},{"size":2531,"mtime":1610466555069,"results":"77","hashOfConfig":"48"},{"size":1546,"mtime":1610466757427,"results":"78","hashOfConfig":"48"},{"size":2605,"mtime":1610528360139,"results":"79","hashOfConfig":"48"},{"size":1801,"mtime":1610472503920,"results":"80","hashOfConfig":"48"},{"size":1569,"mtime":1610479800579,"results":"81","hashOfConfig":"48"},{"size":1739,"mtime":1610480030069,"results":"82","hashOfConfig":"48"},{"size":2272,"mtime":1610531588618,"results":"83","hashOfConfig":"48"},{"size":6543,"mtime":1611322071171,"results":"84","hashOfConfig":"48"},{"size":1678,"mtime":1610527207721,"results":"85","hashOfConfig":"48"},{"size":2939,"mtime":1610531959034,"results":"86","hashOfConfig":"48"},{"size":1737,"mtime":1610532004675,"results":"87","hashOfConfig":"48"},{"size":6919,"mtime":1610714790288,"results":"88","hashOfConfig":"48"},{"size":1711,"mtime":1610527689878,"results":"89","hashOfConfig":"48"},{"size":793,"mtime":1610713108389,"results":"90","hashOfConfig":"48"},{"size":795,"mtime":1610714301132,"results":"91","hashOfConfig":"48"},{"size":842,"mtime":1610715782760,"results":"92","hashOfConfig":"48"},{"size":793,"mtime":1610717427700,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1p6kuu2",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"96"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"96"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/index.js",[],["201","202"],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/App.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/ProtectedRoute.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Login/Login.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/Sections.js",["203","204","205"],"import React, { useState, useEffect } from 'react'\nimport Drawer from '../../Drawer'\nimport clsx from 'clsx';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Pagination from '@material-ui/lab/Pagination';\nimport Row from './Row';\nimport { getAllSectionsPagApi , searchSectionsApi } from './api/api'\nimport AddModal from './modals/AddModal'\nimport DeleteModal from './modals/DeleteModal'\nimport UpdateModal from './modals/UpdateModal'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Search from './Search';\n\nconst drawerWidth = 200;\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  table: {\n    minWidth: 650,\n  },\n}))\n\nconst Sections = () => {\n  const classes = useStyles()\n  const [open, setOpen] = useState(true);\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(1);\n\n  const [rows, setRows] = useState([]);\n\n  const [total, setTotal] = useState(0);\n\n  const [loading, setLoading] = useState(null);\n\n  const [dataChange, setDataChange] = React.useState(false);\n\n  const [addSectionModal, setAddSectionModal] = useState(false);\n\n  const [updateSectionModal, setUpdateSectionModal] = useState(false);\n\n  const [updateSectionSuccessModal, setUpdateSectionSuccessModal] = useState(false);\n\n  const [deleteSectionModal, setDeleteSectionModal] = useState(false);\n\n  const [deletedId, setDeletedId] = React.useState(null);\n  const [deletedName, setDeletedName] = React.useState(null);\n\n  const [updateId, setUpdateId] = useState(null);\n\n  useEffect(() => {\n    let active = true;\n    (async () => {\n      setLoading(true);\n      if (search) {\n        const data = await searchSectionsApi(search);\n        setRows([...data]);\n        setLoading(false);\n      } else {\n        const data = await getAllSectionsPagApi(page);\n        setTotal(Math.ceil(data.total / 10));\n        setRows(data.data);\n        setLoading(false);\n      }\n      if (!active) {\n        return;\n      }\n    })();\n    return () => {\n      active = false;\n    };\n  }, [page, dataChange]);\n\n  const handlePageChange = (event, value) => {\n    setSearch('');\n    setPage(value);\n  };\n\n  const handleAddSectionModalOpen = () => {\n    setAddSectionModal(true);\n  }\n\n  const handleAddSectionModalClose = () => {\n    setAddSectionModal(false);\n  }\n\n  const handleUpdateSectionModalOpen = () => {\n    setUpdateSectionModal(true);\n  }\n\n  const handleUpdateSectionModalClose = () => {\n    setUpdateSectionModal(false);\n  }\n\n  const handleDeleteSectionModalOpen = () => {\n    setDeleteSectionModal(true);\n  }\n\n  const handleDeleteSectionModalClose = () => {\n    setDeleteSectionModal(false);\n  }\n\n  return (\n    <div className={classes.container}>\n      <Drawer view=\"Sections\" open={[open, setOpen]} />\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Button\n          style={{ marginBottom: \"20px\" }}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          className={classes.button}\n          startIcon={<AddCircleIcon />}\n          onClick={handleAddSectionModalOpen}\n        >\n          Add Section\n        </Button>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                {['Section', 'Number of Students', 'Class','created_at','updated_at'].map((cell, key) => (\n                  <TableCell style={{ fontSize: 12 }} key={key} size=\"small\" align=\"left\">{cell}</TableCell>\n                ))}\n                <TableCell size=\"small\" align=\"left\"></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row, key) =>\n                <Row key={key} props={{\n                  row,\n                  setDeletedId,\n                  setDeletedName,\n                  setUpdateId,\n                  handleDeleteSectionModalOpen,\n                  handleUpdateSectionModalOpen\n                }} />\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <div style={{ marginTop: 45, display: 'flex', justifyContent: 'center' }}>\n          {loading && <p>Loading...</p>}\n          {rows.length > 0 && <Pagination color=\"primary\" count={total} page={page} onChange={handlePageChange} />}\n\n        </div>\n        {addSectionModal && <AddModal props={{\n          addSectionModal,\n          handleAddSectionModalClose,\n          setDataChange\n        }} />}\n           <Search search={search} setSearch={setSearch} setDataChange={setDataChange}\n        dataChange={dataChange}\n          />\n        {updateSectionModal && <UpdateModal props={{\n          updateSectionModal,\n          handleUpdateSectionModalClose,\n          updateId,\n          setDataChange\n        }} />}\n        {deleteSectionModal && <DeleteModal props={{\n          deleteSectionModal,\n          handleDeleteSectionModalClose,\n          deletedId,\n          deletedName,\n          setDataChange,\n          length: rows.length,\n          setPage\n        }} />}\n      </main>\n    </div>\n  )\n}\n\nexport default Sections\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Report/Reports.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/Admins.js",["206"],"import React from 'react';\nimport Drawer from '../../Drawer';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Pagination from '@material-ui/lab/Pagination';\nimport AddModal from './modals/AddModal'\nimport AddSuccessModal from './modals/AddSuccessModal'\nimport UpdateModal from './modals/UpdateModal'\nimport UpdateSuccessModal from './modals/UpdateSuccessModal'\nimport DeleteModal from './modals/DeleteModal'\nimport DeleteSuccessModal from './modals/DeleteSuccessModal'\nimport { getAllAdminsApi, addAdminApi, updateAdminApi, deleteAdminApi , searchAdminsApi } from './api/api'\nimport Row from './Row';\nimport Search from './Search';\n\nconst drawerWidth = 200;\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex'\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  table: {\n    minWidth: 650,\n  },\n}))\n\nconst Admins = () => {\n\n  const [open, setOpen] = React.useState(true);\n\n  const [page, setPage] = React.useState(1);\n  const [search, setSearch] = React.useState('');\n  const [rows, setRows] = React.useState([]);\n\n  const [total, setTotal] = React.useState(0);\n  const [loading, setLoading] = React.useState(null);\n  const [addAdminModal, setAddAdminModal] = React.useState(false);\n  const [addAdminSuccessModal, setAddAdminSuccessModal] = React.useState(false);\n  const [updateAdminModal, setUpdateAdminModal] = React.useState(false);\n  const [updateAdminSuccessModal, setUpdateAdminSuccessModal] = React.useState(false);\n  const [deleteAdminModal, setDeleteAdminModal] = React.useState(false);\n  const [deleteAdminSuccessModal, setDeleteAdminSuccessModal] = React.useState(false);\n  \n  const [name, setName] = React.useState('');\n  const [nameUpdate, setNameUpdate] = React.useState('');\n  const [nameError, setNameError] = React.useState(false);\n  const [nameErrorMessage, setNameErrorMessage] = React.useState('');\n\n  const [email, setEmail] = React.useState('');\n  const [emailUpdate, setEmailUpdate] = React.useState('');\n  const [emailError, setEmailError] = React.useState(false);\n  const [emailErrorMessage, setEmailErrorMessage] = React.useState('');\n\n  const [password, setPassword] = React.useState('');\n  const [passwordUpdate, setPasswordUpdate] = React.useState('');\n  const [passwordError, setPasswordError] = React.useState(false);\n  const [passwordErrorMessage, setPasswordErrorMessage] = React.useState('');\n\n  const [dataChange, setDataChange] = React.useState(false);\n\n  const [deletedId, setDeletedId] = React.useState(null);\n  const [deletedName, setDeletedName] = React.useState(null);\n\n  const [updatedId, setUpdatedId] = React.useState(null);\n\n  React.useEffect(() => {\n    let active = true;\n    (async () => {\n      setLoading(true);\n      if (search) {\n        const data = await searchAdminsApi(search);\n        setRows([...data]);\n        setLoading(false);\n      } else {\n        const data = await getAllAdminsApi(page);\n        setTotal(Math.ceil(data.total / 10));\n        setRows(data.data);\n        setLoading(false);\n      }\n      if (!active) {\n        return;\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [page, dataChange]);\n\n  const classes = useStyles()\n\n  const handelePageChange = (event, value) => {\n    setSearch('');\n    setPage(value);\n  };\n\n  const handleAddAdminModalOpen = () => {\n    setAddAdminModal(true);\n  };\n\n  const handleAddAdminModalClose = () => {\n    setAddAdminModal(false);\n    setNameError(false);\n    setNameErrorMessage('');\n    setEmailError(false);\n    setEmailErrorMessage('');\n    setPasswordError(false);\n    setPasswordErrorMessage('');\n  };\n\n  const handleAddAdminSuccessModalOpen = () => {\n    setAddAdminSuccessModal(true);\n  };\n\n  const handleAddAdminSuccessModalClose = () => {\n    setAddAdminSuccessModal(false);\n  };\n\n  const handleUpdateAdminModalOpen = () => {\n    setUpdateAdminModal(true);\n  };\n\n  const handleUpdateAdminModalClose = () => {\n    setUpdateAdminModal(false);\n    setNameError(false);\n    setNameErrorMessage('');\n    setEmailError(false);\n    setEmailErrorMessage('');\n    setPasswordError(false);\n    setPasswordErrorMessage('');\n  };\n\n  const handleUpdateAdminSuccessModalOpen = () => {\n    setUpdateAdminSuccessModal(true);\n  };\n\n  const handleUpdateAdminSuccessModalClose = () => {\n    setUpdateAdminSuccessModal(false);\n  };\n\n  const handleDeleteAdminModalOpen = () => {\n    setDeleteAdminModal(true);\n  };\n\n  const handleDeleteAdminModalClose = () => {\n    setDeleteAdminModal(false);\n  };\n\n  const handleDeleteAdminSuccessModalOpen = () => {\n    setDeleteAdminSuccessModal(true);\n  };\n\n  const handleDeleteAdminSuccessModalClose = () => {\n    setDeleteAdminSuccessModal(false);\n  };\n\n  const handleFormChange = (e) => {\n    e.target.id === \"name\" && setName(e.target.value);\n    e.target.id === \"email\" && setEmail(e.target.value);\n    e.target.id === \"password\" && setPassword(e.target.value);\n  }\n\n  const handleFormChangeUpdate = (e) => {\n    e.target.id === \"name\" && setNameUpdate(e.target.value);\n    e.target.id === \"email\" && setEmailUpdate(e.target.value);\n    e.target.id === \"password\" && setPasswordUpdate(e.target.value);\n  }\n\n  const addAdmin = async e => {\n    setNameError(false);\n    setEmailError(false);\n    setPasswordError(false);\n    setNameErrorMessage('');\n    setEmailErrorMessage('');\n    setPasswordErrorMessage('');\n    e.preventDefault()\n    const data = await addAdminApi(name, email, password);\n    if (data.errors) {\n      if (data.errors.name) {\n        setNameError(true);\n        setNameErrorMessage(data.errors.name[0]);\n      }\n      if (data.errors.email) {\n        setEmailError(true);\n        setEmailErrorMessage(data.errors.email[0]);\n      }\n      if (data.errors.password) {\n        setPasswordError(true);\n        setPasswordErrorMessage(data.errors.password[0]);\n      }\n      return;\n    }\n    handleAddAdminModalClose();\n    handleAddAdminSuccessModalOpen();\n    setName('');\n    setEmail('');\n    setPassword('');\n    setDataChange(!dataChange);\n  }\n\n\n  const updateAdmin = async e => {\n    setNameError(false);\n    setEmailError(false);\n    setPasswordError(false);\n    setNameErrorMessage('');\n    setEmailErrorMessage('');\n    setPasswordErrorMessage('');\n    e.preventDefault();\n    const data = await updateAdminApi(updatedId, nameUpdate, emailUpdate, passwordUpdate);\n    if (data.errors) {\n      if (data.errors.name) {\n        setNameError(true);\n        setNameErrorMessage(data.errors.name[0]);\n      }\n      if (data.errors.email) {\n        setEmailError(true);\n        setEmailErrorMessage(data.errors.email[0]);\n      }\n      if (data.errors.password) {\n        setPasswordError(true);\n        setPasswordErrorMessage(data.errors.password[0]);\n      }\n      return;\n    }\n    handleUpdateAdminModalClose();\n    handleUpdateAdminSuccessModalOpen();\n    setUpdatedId(null);\n    setNameUpdate('');\n    setEmailUpdate('');\n    setPasswordUpdate('');\n    setDataChange(!dataChange);\n  }\n\n  const deleteAdmin = async () => {\n    await deleteAdminApi(deletedId);\n    setDataChange(!dataChange);\n    setDeletedId(null);\n    setDeletedName(null);\n    handleDeleteAdminModalClose();\n    handleDeleteAdminSuccessModalOpen();\n  }\n\n  return (\n    <div className={classes.container}>\n      <Drawer view=\"Admins\" open={[open, setOpen]} />\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Button\n          style={{ marginBottom: \"20px\" }}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          className={classes.button}\n          startIcon={<AddCircleIcon />}\n          onClick={handleAddAdminModalOpen}\n        >\n          Add Admin\n      </Button>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                {['Name', 'Email', 'Created', 'Updated'].map((cell, key) => (\n                  <TableCell key={key} size=\"small\" align=\"left\">{cell}</TableCell>\n                ))}\n                <TableCell size=\"small\" align=\"left\"></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row, key) =>\n                <Row key={key} props={\n                  {\n                    row,\n                    setUpdatedId,\n                    setNameUpdate,\n                    setEmailUpdate,\n                    handleUpdateAdminModalOpen,\n                    setDeletedId,\n                    setDeletedName,\n                    handleDeleteAdminModalOpen,\n                  }\n                } />\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <div style={{ marginTop: 45, display: 'flex', justifyContent: 'center' }}>\n          {loading && <p>Loading...</p>}\n          {rows.length > 0 && <Pagination color=\"primary\" count={total} page={page} onChange={handelePageChange} />}\n\n        </div>\n        <AddModal props={{\n          name,\n          addAdminModal,\n          handleAddAdminModalClose,\n          addAdmin,\n          handleFormChange,\n          nameError,\n          nameErrorMessage,\n          emailError,\n          email,\n          emailErrorMessage,\n          passwordError,\n          passwordErrorMessage,\n          password\n        }}\n        />\n        <AddSuccessModal props={{\n          addAdminSuccessModal,\n          handleAddAdminSuccessModalClose,\n        }} />\n         <Search search={search} setSearch={setSearch} setDataChange={setDataChange}\n        dataChange={dataChange}\n          />\n        <UpdateModal props={{\n          updateAdminModal,\n          handleUpdateAdminModalClose,\n          updateAdmin,\n          nameError,\n          nameUpdate,\n          handleFormChangeUpdate,\n          nameErrorMessage,\n          emailError,\n          emailUpdate,\n          emailErrorMessage,\n          passwordError,\n          passwordUpdate,\n          passwordErrorMessage\n        }} />\n        <UpdateSuccessModal props={{\n          updateAdminSuccessModal,\n          handleUpdateAdminSuccessModalClose,\n        }} />\n        <DeleteModal props={{\n          deleteAdminModal,\n          handleDeleteAdminModalClose,\n          deletedName,\n          deleteAdmin\n        }} />\n        <DeleteSuccessModal props={{\n          deleteAdminSuccessModal,\n          handleDeleteAdminSuccessModalClose\n        }} />\n      </main>\n    </div>\n  )\n}\n\nexport default Admins\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/Students.js",["207","208","209"],"import React, { useState, useEffect } from 'react'\nimport Drawer from '../../Drawer'\nimport clsx from 'clsx';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Pagination from '@material-ui/lab/Pagination';\nimport Row from './Row';\nimport { getAllStudentsApi , searchStudentsApi } from './api/api'\nimport AddModal from './modals/AddModal'\nimport DeleteModal from './modals/DeleteModal'\nimport UpdateModal from './modals/UpdateModal'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Search from './Search';\n\nconst drawerWidth = 200;\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  table: {\n    minWidth: 650,\n  },\n}))\n\nconst Students = () => {\n  const classes = useStyles()\n  const [open, setOpen] = useState(true);\n\n  const [page, setPage] = useState(1);\n\n  const [rows, setRows] = useState([]);\n\n  const [total, setTotal] = useState(0);\n\n  const [loading, setLoading] = useState(null);\n\n  const [dataChange, setDataChange] = React.useState(false);\n\n  const [addStudentModal, setAddStudentModal] = useState(false);\n\n  const [updateStudentModal, setUpdateStudentModal] = useState(false);\n\n  const [updateStudentSuccessModal, setUpdateStudentSuccessModal] = useState(false);\n\n  const [deleteStudentModal, setDeleteStudentModal] = useState(false);\n\n  const [deletedId, setDeletedId] = React.useState(null);\n  const [deletedFname, setDeletedFname] = React.useState(null);\n  const [deletedLname, setDeletedLname] = React.useState(null);\n\n  const [updateId, setUpdateId] = useState(null);\n  const [search, setSearch] = useState('');\n\n\n  useEffect(() => {\n    let active = true;\n    (async () => {\n      setLoading(true);\n      if (search)\n      {\n        const data = await searchStudentsApi(search);\n        setRows(data.data);\n        setLoading(false);\n      } else {\n        const data = await getAllStudentsApi(page);\n        setTotal(Math.ceil(data.total / 10));\n        setRows(data.data);\n        setLoading(false);\n      }\n      if (!active) {\n        return;\n      }\n\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [page, dataChange]);\n\n  const handlePageChange = (event, value) => {\n    setSearch('');\n    setPage(value);\n  };\n\n  const handleAddStudentModalOpen = () => {\n    setAddStudentModal(true);\n  }\n\n  const handleAddStudentModalClose = () => {\n    setAddStudentModal(false);\n  }\n\n  const handleUpdateStudentModalOpen = () => {\n    setUpdateStudentModal(true);\n  }\n\n  const handleUpdateStudentModalClose = () => {\n    setUpdateStudentModal(false);\n  }\n\n  const handleDeleteStudentModalOpen = () => {\n    setDeleteStudentModal(true);\n  }\n\n  const handleDeleteStudentModalClose = () => {\n    setDeleteStudentModal(false);\n  }\n\n  return (\n    <div className={classes.container}>\n      <Drawer view=\"Students\" open={[open, setOpen]} />\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Button\n          style={{ marginBottom: \"20px\" }}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          className={classes.button}\n          startIcon={<AddCircleIcon />}\n          onClick={handleAddStudentModalOpen}\n        >\n          Add Student\n        </Button>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                {['ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Section', 'Class'].map((cell, key) => (\n                  <TableCell style={{ fontSize: 12 }} key={key} size=\"small\" align=\"left\">{cell}</TableCell>\n                ))}\n                <TableCell size=\"small\" align=\"left\"></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row, key) =>\n                <Row key={key} props={{\n                  row,\n                  setDeletedId,\n                  setDeletedFname,\n                  setDeletedLname,\n                  setUpdateId,\n                  handleDeleteStudentModalOpen,\n                  handleUpdateStudentModalOpen\n                }} />\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <div style={{ marginTop: 45, display: 'flex', justifyContent: 'center' }}>\n          {loading && <p>Loading...</p>}\n          {rows.length > 0 && <Pagination color=\"primary\" count={total} page={page} onChange={handlePageChange} />}\n\n        </div>\n        {addStudentModal && <AddModal props={{\n          addStudentModal,\n          handleAddStudentModalClose,\n          setDataChange\n        }} />}\n        {updateStudentModal && <UpdateModal props={{\n          updateStudentModal,\n          handleUpdateStudentModalClose,\n          updateId,\n          setDataChange\n        }} />}\n          <Search search={search} setSearch={setSearch} setDataChange={setDataChange}\n        dataChange={dataChange}\n          />\n        {deleteStudentModal && <DeleteModal props={{\n          deleteStudentModal,\n          handleDeleteStudentModalClose,\n          deletedId,\n          deletedFname,\n          deletedLname,\n          setDataChange,\n          length: rows.length,\n          setPage\n        }} />}\n      </main>\n    </div>\n  )\n}\n\nexport default Students\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/Classes.js",["210","211"],"import React, { useState, useEffect } from 'react';\nimport Drawer from '../../Drawer';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Pagination from '@material-ui/lab/Pagination';\nimport Row from './Row';\nimport { getAllClassesPagApi , addClassApi , updateClassApi ,deleteClassApi , searchClassesApi } from './api/api';\nimport AddModal from './modals/AddModal'\nimport UpdateModal from './modals/UpdateModal'\nimport UpdateSuccessModal from './modals/UpdateSuccessModal'\nimport DeleteModal from './modals/DeleteModal'\nimport DeleteSuccessModal from './modals/DeleteSuccessModal'\nimport AddSuccessModal from './modals/AddSuccessModal'\nimport Search from './Search';\n\nconst drawerWidth = 200;\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  table: {\n    minWidth: 650,\n  },\n}))\n\nconst Classes = () => {\n  const classes = useStyles()\n  const [search, setSearch] = useState('');\n  const [open, setOpen] = useState(true);\n  const [status, setStatus] = useState('');\n  const [shown, setShown] = useState(false);\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(null);\n  const [total, setTotal] = useState(0);\n  const [page, setPage] = useState(1);\n  const [dataChange, setDataChange] = useState(true);\n  const [addClassModal, setAddClassModal] = useState(false);\n  const [addClassSuccessModal, setAddClassSuccessModal] = React.useState(false);\n  const [updateClassModal, setUpdateClassModal] = React.useState(false);\n  const [updateClassSuccessModal, setUpdateClassSuccessModal] = React.useState(false);\n  const [deleteClassModal, setDeleteClassModal] = React.useState(false);\n  const [deleteClassSuccessModal, setDeleteClassSuccessModal] = React.useState(false);\n  const [name, setName] = React.useState('');\n  const [nameUpdate, setNameUpdate] = React.useState('');\n  const [deletedName, setDeletedName] = React.useState(null);\n  const [nameError, setNameError] = React.useState(false);\n  const [nameErrorMessage, setNameErrorMessage] = React.useState('');\n  const [updatedId, setUpdatedId] = React.useState(null);\n  const [deletedId, setDeletedId] = React.useState(null);\n  \n\n   \n  \n  const handleAddClassModalClose = () => {\n    setAddClassModal(false);\n    setNameError(false);\n    setNameErrorMessage('');\n  };\n\n  const handleAddClassSuccessModalOpen = () => {\n    setAddClassSuccessModal(true);\n  };\n  \n  const handleFormChange = (e) => {\n    e.target.id === \"name\" && setName(e.target.value);\n  }\n\n  const addClass = async e => {\n    setNameError(false);\n    setNameErrorMessage('');\n    e.preventDefault();\n    const data = await addClassApi(name);\n    if (data.errors) {\n      if (data.errors.name) {\n        setNameError(true);\n        setNameErrorMessage(data.errors.name[0]);\n      }\n      return;\n    }\n    handleAddClassModalClose();\n    handleAddClassSuccessModalOpen();\n    setName('');\n    setDataChange(!dataChange);\n  }\n\n  const handleAddClassSuccessModalClose = () => {\n    setAddClassSuccessModal(false);\n  };\n\n\n  const handleUpdateClassModalOpen = () => {\n    setUpdateClassModal(true);\n  };\n\n  const handleUpdateClassModalClose = () => {\n    setUpdateClassModal(false);\n    setNameError(false);\n    setNameErrorMessage('');\n  };\n\n  const handleUpdateClassSuccessModalOpen = () => {\n    setUpdateClassSuccessModal(true);\n  };\n\n  const handleDeleteClassModalOpen = () => {\n    setDeleteClassModal(true);\n  };\n\n  const handleUpdateClassSuccessModalClose = () => {\n    setUpdateClassSuccessModal(false);\n  };\n\n  const handleFormChangeUpdate = (e) => {\n    e.target.id === \"name\" && setNameUpdate(e.target.value);\n  }\n\n  const updateClass = async e => {\n    e.preventDefault();\n    setNameError(false);\n    setNameErrorMessage('');\n    const data = await updateClassApi(updatedId, nameUpdate);\n    if (data.errors) {\n      if (data.errors.name) {\n        setNameError(true);\n        setNameErrorMessage(data.errors.name[0]);\n      }\n      return;\n    }\n    handleUpdateClassModalClose();\n    handleUpdateClassSuccessModalOpen();\n    setUpdatedId(null);\n    setNameUpdate('');\n    setDataChange(!dataChange);\n  }\n  const handleDeleteClassModalClose = () => {\n    setDeleteClassModal(false);\n  };\n\n  const handleDeleteClassSuccessModalOpen = () => {\n    setDeleteClassSuccessModal(true);\n  };\n  const handleDeleteClassSuccessModalClose = () => {\n    setDeleteClassSuccessModal(false);\n  };\n\n  const deleteClass = async () => {\n    const data = await deleteClassApi(deletedId);\n    if (data.message)\n    {\n      setShown(true);\n      setStatus(data.message);\n      console.log(status);\n      setDataChange(!dataChange);\n      handleDeleteClassModalClose();\n      handleDeleteClassSuccessModalOpen();\n      return;\n    }\n    setDeletedId(null);\n    setDeletedName(null);\n    handleDeleteClassModalClose();\n    handleDeleteClassSuccessModalOpen();\n  }\n\n    useEffect(() => {\n      let active = true;\n      (async () => {\n        setLoading(true);\n        if (search) {\n          const data = await searchClassesApi(search);\n          setRows([...data]);\n          setLoading(false);\n        } else {\n          const data = await getAllClassesPagApi(page);\n          if (!active) {\n            return;\n          }\n          setTotal(Math.ceil(data.total / 10));\n          setRows(data.data);\n          setLoading(false);\n        }\n      \n      })();\n\n      return () => {\n        active = false;\n      };\n    }, [page, dataChange]);\n\n\n    return (\n      <div className={classes.container}>\n        <Drawer view=\"Classes\" open={[open, setOpen]} />\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={classes.drawerHeader} />\n\n          <Button\n            style={{ marginBottom: \"20px\" }}\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            className={classes.button}\n            startIcon={<AddCircleIcon />}\n            onClick={() => setAddClassModal(true)}\n          >\n            Add Class\n      </Button>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  {['Name', 'Created', 'Updated'].map((cell, key) => (\n                    <TableCell key={key} size=\"small\" align=\"left\">{cell}</TableCell>\n                  ))}\n                  <TableCell size=\"small\" align=\"left\"></TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows.map((row, key) =>\n                  <Row key={key} props={{\n                    row,\n                    updateClass,\n                    setUpdatedId,\n                    setNameUpdate,\n                    handleUpdateClassModalOpen,\n                    deleteClass,\n                    setDeletedId,\n                    setDeletedName,\n                    handleDeleteClassModalOpen,\n                  }} />)} \n              </TableBody>\n            </Table>\n          </TableContainer>\n          <AddModal props={{\n            name,\n            addClassModal,\n            handleAddClassModalClose,\n            addClass,\n            handleFormChange,\n            nameError,\n            nameErrorMessage,\n          }}\n          />\n          <AddSuccessModal props={{\n            addClassSuccessModal,\n            handleAddClassSuccessModalClose,\n          }} />\n          <UpdateModal props={{\n            updateClassModal,\n            updateClass,\n            handleUpdateClassModalClose,\n            nameError,\n            nameUpdate,\n            handleFormChangeUpdate,\n            nameErrorMessage,\n            nameUpdate,\n            updatedId\n          }} />\n          <UpdateSuccessModal props={{\n            updateClassSuccessModal,\n            handleUpdateClassSuccessModalClose\n          }} />\n              <DeleteModal props={{\n          deleteClassModal,\n          handleDeleteClassModalClose,\n          deletedName,\n          deleteClass\n          }} />\n          <Search search={search} setSearch={setSearch} setDataChange={setDataChange}\n        dataChange={dataChange}\n          />\n        <DeleteSuccessModal props={{\n          deleteClassSuccessModal,\n            handleDeleteClassSuccessModalClose,\n            status,\n            shown\n        }} />\n          <div style={{ marginTop: 45, display: 'flex', justifyContent: 'center' }}>\n            {loading && <p>Loading...</p>}\n            {rows.length > 0 && <Pagination color=\"primary\" count={total} page={page} onChange={(e, value) => setPage(value)} />}\n          </div>\n        </main>\n      </div>\n    )\n  }\n\n\nexport default Classes\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/Drawer.js",["212"],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/Row.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/AddModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/AddSuccessModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/UpdateModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/UpdateSuccessModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/DeleteModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/api/api.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/modals/DeleteSuccessModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/Row.js",["213","214","215"],"import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst TableRows = ({ props }) => {\n\n  const {\n    row,\n    setDeletedId,\n    setDeletedFname,\n    setDeletedLname,\n    setUpdateId,\n    handleDeleteStudentModalOpen,\n    handleUpdateStudentModalOpen,\n\n  } = props;\n\n  const useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }))\n  const classes = useStyles()\n\n  const created = new Date(row.created_at);\n  const updated = new Date(row.updated_at);\n  return (\n    <TableRow key={row.id}>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.student_id}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.first_name}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.last_name}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.email}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.phone}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.section.name}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.section.class.name}\n      </TableCell>\n      {/* <TableCell size=\"small\" align=\"left\">\n        {`${created.getFullYear()}-${created.getMonth() + 1}-${created.getDate()}`}\n      </TableCell>\n      <TableCell size=\"small\" align=\"left\">\n        {row.created_at === row.updated_at ? 'never' : `${updated.getFullYear()}-${updated.getMonth() + 1}-${updated.getDate()}`}\n      </TableCell> */}\n      <TableCell size=\"small\" align=\"left\">\n        <Button\n          onClick={() => {\n            setUpdateId(row.id);\n            handleUpdateStudentModalOpen();\n          }}\n          variant=\"contained\"\n          color=\"default\"\n          className={classes.button}\n          startIcon={<UpdateIcon />}>\n          Update\n                      </Button>\n        <Button\n          onClick={() => {\n            setDeletedId(row.id);\n            setDeletedFname(row.first_name);\n            setDeletedLname(row.last_name);\n            handleDeleteStudentModalOpen();\n          }}\n          variant=\"contained\"\n          color=\"secondary\"\n          startIcon={<DeleteIcon />}\n          className={classes.button}\n        >\n          Delete\n                      </Button>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nexport default TableRows\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/Row.js",["216"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst Row = ({ props }) => {\n  const { row, setUpdatedId, setNameUpdate, handleUpdateClassModalOpen,\n  setDeletedId,setDeletedName,handleDeleteClassModalOpen , deleteClass\n  } = props;\n\n  const useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }))\n  const classes = useStyles()\n\n  const created = new Date(row.created_at);\n  const updated = new Date(row.updated_at);\n\n  return (\n    <TableRow key={row.id}>\n      <TableCell size=\"small\" align=\"left\">\n        {row.name}\n      </TableCell>\n      <TableCell size=\"small\" align=\"left\">\n        {`${created.getFullYear()}-${created.getMonth() + 1}-${created.getDate()}`}\n      </TableCell>\n      <TableCell size=\"small\" align=\"left\">\n        {row.created_at === row.updated_at ? 'never' : `${updated.getFullYear()}-${updated.getMonth() + 1}-${updated.getDate()}`}\n      </TableCell>\n      <TableCell size=\"small\" align=\"left\">\n        <Button\n          onClick={() => {\n            setUpdatedId(row.id);\n            setNameUpdate(row.name);\n            handleUpdateClassModalOpen();\n          }}\n          variant=\"contained\"\n          color=\"default\"\n          className={classes.button}\n          startIcon={<UpdateIcon />}>\n          Update\n                      </Button>\n        <Button\n          onClick={() => {\n            setDeletedId(row.id);\n            setDeletedName(row.name);\n            handleDeleteClassModalOpen();\n          }}\n          variant=\"contained\"\n          color=\"secondary\"\n          startIcon={<DeleteIcon />}\n          className={classes.button}\n        >\n          Delete\n                      </Button>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nexport default Row\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/api/api.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/DeleteModal.js",["217"],"import React, { useState } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { deleteStudentApi } from '../api/api'\nimport DeleteSuccessModal from './DeleteSuccessModal'\n\nconst DeleteModal = ({ props }) => {\n\n  const [deleteStudentSuccessModal, setDeleteStudentSuccessModal] = useState(false);\n\n  const handleDeleteStudentSuccessModalOpen = () => {\n    setDeleteStudentSuccessModal(true);\n  };\n\n  const handleDeleteStudentSuccessModalClose = () => {\n    setDeleteStudentSuccessModal(false);\n    handleDeleteStudentModalClose();\n  };\n\n  const {\n    deleteStudentModal,\n    handleDeleteStudentModalClose,\n    deletedId,\n    deletedFname,\n    deletedLname,\n    setDataChange,\n    length,\n    setPage\n  } = props;\n\n\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  }));\n  const classes = useStyles();\n\n  const deleteStudent = async () => {\n    await deleteStudentApi(deletedId);\n    if (length == 1) {\n      setPage(prev => --prev)\n      handleDeleteStudentSuccessModalOpen();\n      return;\n    }\n    setDataChange(prev => !prev);\n    handleDeleteStudentSuccessModalOpen();\n  }\n\n  return (\n    <>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={deleteStudentModal}\n        onClose={handleDeleteStudentModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={deleteStudentModal}>\n          <div className={classes.paper}>\n            <span style={{ marginRight: '10px' }} id=\"transition-modal-description\">Are you sure you want to delete Student <span style={{ fontSize: '1rem', fontWeight: 'bold' }}>{deletedFname} {deletedLname}</span></span>\n            <Button style={{ marginRight: '10px' }} onClick={deleteStudent} variant=\"contained\" color=\"secondary\">\n              Yes\n                </Button>\n            <Button onClick={() => { handleDeleteStudentModalClose() }} variant=\"contained\" color=\"primary\">\n              No\n                </Button>\n          </div>\n        </Fade>\n      </Modal>\n      {deleteStudentSuccessModal && <DeleteSuccessModal props={{\n        deleteStudentSuccessModal,\n        handleDeleteStudentSuccessModalClose\n      }} />}\n    </>\n  )\n}\n\nexport default DeleteModal\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/AddModal.js",["218"],"import React, { useState, useEffect } from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getAllSectionsNoPaginateApi } from '../../Section/api/api'\nimport { addStudentApi } from '../api/api'\nimport AddSuccessModal from './AddSuccessModal'\n\nconst AddModal = ({ props }) => {\n  const { addStudentModal, handleAddStudentModalClose, setDataChange } = props\n\n  const [addStudentSuccessModal, setAddStudentSuccessModal] = useState(false);\n\n  const handleAddStudentSuccessModalClose = () => {\n    setAddStudentSuccessModal(false);\n  };\n\n  const handleAddStudentSuccessModalOpen = () => {\n    setAddStudentSuccessModal(true);\n  };\n\n  const error = { msg: '', status: false };\n\n  const [fname, setFname] = useState('');\n  const [fnameError, setFnameError] = useState(error);\n\n  const [lname, setLname] = useState('');\n  const [lnameError, setLnameError] = useState(error);\n\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(error);\n\n  const [phone, setPhone] = useState('');\n  const [phoneError, setPhoneError] = useState(error);\n\n\n  const [sectionId, setSectionId] = useState('');\n  const [sectionError, setSectionError] = useState(error);\n\n\n  const [file, setFile] = useState(null);\n  const [fileError, setFileError] = useState(error);\n\n  const [sections, setSections] = useState([]);\n\n  useEffect(() => {\n    let active = true;\n    (async () => {\n      const data = await getAllSectionsNoPaginateApi();\n      if (!active) {\n        return;\n      }\n      setSections(data);\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, []);\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    select: {\n      // margin: theme.spacing(1),\n      marginBottom: 20,\n      minWidth: 120,\n    },\n  }));\n  const classes = useStyles();\n\n  const handleFormChange = e => {\n    e.target.id === \"first_name\" && setFname(e.target.value);\n    e.target.id === \"last_name\" && setLname(e.target.value);\n    e.target.id === \"email\" && setEmail(e.target.value);\n    e.target.id === \"phone\" && setPhone(e.target.value);\n  }\n\n  const handleSelectChange = e => {\n    setSectionId(e.target.value);\n  }\n\n  const addStudent = async e => {\n    setFnameError(error);\n    setLnameError(error);\n    setEmailError(error);\n    setPhoneError(error);\n    setSectionError(error);\n    setFileError(error);\n    e.preventDefault();\n    const data = await addStudentApi(fname, lname, email, phone, sectionId, file);\n    if (data.errors) {\n      if (data.errors.first_name) {\n        setFnameError({ msg: data.errors.first_name[0], status: true });\n      }\n      if (data.errors.last_name) {\n        setLnameError({ msg: data.errors.last_name[0], status: true });\n      }\n      if (data.errors.email) {\n        setEmailError({ msg: data.errors.email[0], status: true });\n      }\n      if (data.errors.phone) {\n        setPhoneError({ msg: data.errors.phone[0], status: true });\n      }\n      if (data.errors.section_id) {\n        setSectionError({ msg: \"The section is required\", status: true });\n      }\n      if (data.errors.file) {\n        setFileError({ msg: data.errors.file[0], status: true });\n      }\n      return;\n    }\n    if (data.message == \"Section is full\") {\n      setSectionError({ msg: \"Section is full\", status: true });\n      return;\n    }\n    handleAddStudentSuccessModalOpen();\n    setDataChange(prev => !prev);\n  }\n\n  return (\n    <>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={addStudentModal}\n        onClose={handleAddStudentModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={addStudentModal}>\n          <div className={classes.paper}>\n            <Typography style={{ color: \"#3f51b5\" }} variant=\"h4\" component=\"h2\" gutterBottom>\n              Add Student Form\n          </Typography>\n            <form onSubmit={addStudent}>\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={fnameError.status}>\n                <InputLabel htmlFor=\"first_name\">First Name</InputLabel>\n                <Input\n                  placeholder=\"e.g. john\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"first_name\"\n                  value={fname}\n                  onChange={handleFormChange}\n                  aria-describedby=\"fname-text\"\n                />\n                {fnameError.status && <FormHelperText id=\"fname-error-text\">{fnameError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={lnameError.status}>\n                <InputLabel htmlFor=\"last_name\">Last Name</InputLabel>\n                <Input\n                  placeholder=\"e.g. doe\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"last_name\"\n                  value={lname}\n                  onChange={handleFormChange}\n                  aria-describedby=\"lname-text\"\n                />\n                {lnameError.status && <FormHelperText id=\"lname-error-text\">{lnameError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={emailError.status}>\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\n                <Input\n                  placeholder=\"e.g. johndoe@email.com\"\n                  type=\"email\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"email\"\n                  value={email}\n                  onChange={handleFormChange}\n                  aria-describedby=\"email-text\"\n                />\n                {emailError.status && <FormHelperText id=\"email-error-text\">{emailError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={phoneError.status}>\n                <InputLabel htmlFor=\"phone\">Phone</InputLabel>\n                <Input\n                  placeholder=\"e.g. 71 479 407\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"phone\"\n                  value={phone}\n                  onChange={handleFormChange}\n                  aria-describedby=\"phone-text\"\n                />\n                {phoneError.status && <FormHelperText id=\"phone-error-text\">{phoneError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl className={classes.select} error={sectionError.status}>\n                <InputLabel id=\"demo-simple-select-label\">Section</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"section\"\n                  value={sectionId}\n                  onChange={handleSelectChange}\n                >\n                  {sections.map((section, key) => (\n                    <MenuItem key={key} value={section.id}>{section.name}</MenuItem>\n                  ))}\n                </Select>\n                {sectionError.status && <FormHelperText id=\"section-error-text\">{sectionError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={fileError.status}>\n                <Input type=\"file\" id=\"fileId\" style={{ display: 'none' }}\n                  onChange={(e) => {\n                    setFile(e.currentTarget.files[0])\n                    console.log(e.currentTarget.files[0].name);\n                  }\n                  }\n                />\n                {file && <span style={{ marginRight: 10 }}>{file.name}</span>}\n                <Button\n                  variant=\"contained\"\n                  color=\"default\"\n                  size=\"small\"\n                  className={classes.button}\n                  startIcon={<CloudUploadIcon />}\n                  onClick={() => document.getElementById('fileId').click()}\n                >Upload Image</Button>\n                {fileError.status && <FormHelperText id=\"file-error-text\">{fileError.msg}</FormHelperText>}\n              </FormControl>\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Add Student\n            </Button>\n            </form>\n          </div>\n        </Fade>\n      </Modal>\n      {addStudentSuccessModal && <AddSuccessModal props={{\n        addStudentSuccessModal,\n        handleAddStudentSuccessModalClose,\n        handleAddStudentModalClose\n      }} />}\n    </>\n\n  )\n}\n\nexport default AddModal\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/UpdateModal.js",["219","220"],"import React, { useState, useEffect } from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Avatar from '@material-ui/core/Avatar';\nimport { getAllSectionsNoPaginateApi } from '../../Section/api/api'\nimport { getStudentApi, updateStudentApi } from '../api/api'\nimport UpdateSuccessModal from './UpdateSuccessModal'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst UpdateModal = ({ props }) => {\n  const {\n    updateStudentModal,\n    handleUpdateStudentModalClose,\n    updateId,\n    setDataChange\n  } = props\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    select: {\n      // margin: theme.spacing(1),\n      marginBottom: 20,\n      minWidth: 120,\n    },\n    small: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    large: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  }));\n  const classes = useStyles();\n\n  const [updateStudentSuccessModal, setUpdateStudentSuccessModal] = useState(false);\n\n\n  const handleUpdateStudentSuccessModalClose = () => {\n    setUpdateStudentSuccessModal(false);\n  };\n\n  const handleUpdateStudentSuccessModalOpen = () => {\n    setUpdateStudentSuccessModal(true);\n  };\n\n  const error = { msg: '', status: false };\n\n  const [fname, setFname] = useState('');\n  const [fnameError, setFnameError] = useState(error);\n\n  const [lname, setLname] = useState('');\n  const [lnameError, setLnameError] = useState(error);\n\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(error);\n\n  const [phone, setPhone] = useState('');\n  const [phoneError, setPhoneError] = useState(error);\n\n\n  const [sectionId, setSectionId] = useState('');\n  const [sectionError, setSectionError] = useState(error);\n\n\n  const [file, setFile] = useState(null);\n  const [fileError, setFileError] = useState(error);\n\n  const [image, setImage] = useState(null);\n\n  const [sections, setSections] = useState([]);\n\n  useEffect(() => {\n    let active = true;\n    (async () => {\n      const data = await getAllSectionsNoPaginateApi();\n      const data2 = await getStudentApi(updateId);\n      if (!active) {\n        return;\n      }\n      setSections(data);\n      setFname(data2.first_name);\n      setLname(data2.last_name);\n      setEmail(data2.email);\n      setPhone(data2.phone);\n      setImage(data2.picture);\n      setSectionId(data2.section_id)\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, []);\n\n  const handleFormChange = e => {\n    e.target.id === \"first_name\" && setFname(e.target.value);\n    e.target.id === \"last_name\" && setLname(e.target.value);\n    e.target.id === \"email\" && setEmail(e.target.value);\n    e.target.id === \"phone\" && setPhone(e.target.value);\n  }\n\n  const handleSelectChange = e => {\n    setSectionId(e.target.value);\n  }\n\n  const updateStudent = async e => {\n    e.preventDefault();\n    setFnameError(error);\n    setLnameError(error);\n    setEmailError(error);\n    setPhoneError(error);\n    setSectionError(error);\n    setFileError(error);\n    const data = await updateStudentApi(updateId, fname, lname, email, phone, sectionId, file);\n    if (data.errors) {\n      if (data.errors.first_name) {\n        setFnameError({ msg: data.errors.first_name[0], status: true });\n      }\n      if (data.errors.last_name) {\n        setLnameError({ msg: data.errors.last_name[0], status: true });\n      }\n      if (data.errors.email) {\n        setEmailError({ msg: data.errors.email[0], status: true });\n      }\n      if (data.errors.phone) {\n        setPhoneError({ msg: data.errors.phone[0], status: true });\n      }\n      if (data.errors.section_id) {\n        setSectionError({ msg: \"The section is required\", status: true });\n      }\n      if (data.errors.file) {\n        setFileError({ msg: data.errors.file[0], status: true });\n      }\n      return;\n    }\n    if (data.message == \"Section is full\") {\n      setSectionError({ msg: \"Section is full\", status: true });\n      return;\n    }\n    handleUpdateStudentSuccessModalOpen();\n    setDataChange(prev => !prev);\n  }\n\n  return (\n    <>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={updateStudentModal}\n        onClose={handleUpdateStudentModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={updateStudentModal}>\n          <div className={classes.paper}>\n            <Typography style={{ color: \"#3f51b5\" }} variant=\"h4\" component=\"h2\" gutterBottom>\n              Update Student Form\n              </Typography>\n\n            {image && (\n              <div style={{ display: 'flex', justifyContent: \"center\" }}>\n                <Avatar alt=\"student\" src={`http://localhost:8000/storage/${image}`} className={classes.large} />\n              </div>\n            )}\n\n\n            <form onSubmit={updateStudent}>\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={fnameError.status}>\n                <InputLabel htmlFor=\"first_name\">First Name</InputLabel>\n                <Input\n                  placeholder=\"e.g. john\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"first_name\"\n                  value={fname}\n                  onChange={handleFormChange}\n                  aria-describedby=\"fname-text\"\n                />\n                {fnameError.status && <FormHelperText id=\"fname-error-text\">{fnameError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={lnameError.status}>\n                <InputLabel htmlFor=\"last_name\">Last Name</InputLabel>\n                <Input\n                  placeholder=\"e.g. doe\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"last_name\"\n                  value={lname}\n                  onChange={handleFormChange}\n                  aria-describedby=\"lname-text\"\n                />\n                {lnameError.status && <FormHelperText id=\"lname-error-text\">{lnameError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={emailError.status}>\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\n                <Input\n                  placeholder=\"e.g. johndoe@email.com\"\n                  type=\"email\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"email\"\n                  value={email}\n                  onChange={handleFormChange}\n                  aria-describedby=\"email-text\"\n                />\n                {emailError.status && <FormHelperText id=\"email-error-text\">{emailError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={phoneError.status}>\n                <InputLabel htmlFor=\"phone\">Phone</InputLabel>\n                <Input\n                  placeholder=\"e.g. 71 479 407\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"phone\"\n                  value={phone}\n                  onChange={handleFormChange}\n                  aria-describedby=\"phone-text\"\n                />\n                {phoneError.status && <FormHelperText id=\"phone-error-text\">{phoneError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl className={classes.select} error={sectionError.status}>\n                <InputLabel id=\"demo-simple-select-label\">Section</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"section\"\n                  value={sectionId}\n                  onChange={handleSelectChange}\n                >\n                  {sections.map((section, key) => (\n                    <MenuItem key={key} value={section.id}>{section.name}</MenuItem>\n                  ))}\n                </Select>\n                {sectionError.status && <FormHelperText id=\"section-error-text\">{sectionError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={fileError.status}>\n                <Input type=\"file\" id=\"fileId\" style={{ display: 'none' }}\n                  onChange={(e) => {\n                    setFile(e.currentTarget.files[0])\n                    console.log(e.currentTarget.files[0].name);\n                  }\n                  }\n                />\n                {file && <span style={{ marginRight: 10 }}>{file.name}</span>}\n                <Button\n                  variant=\"contained\"\n                  color=\"default\"\n                  size=\"small\"\n                  className={classes.button}\n                  startIcon={<CloudUploadIcon />}\n                  onClick={() => document.getElementById('fileId').click()}\n                >Upload Image</Button>\n                {fileError.status && <FormHelperText id=\"file-error-text\">{fileError.msg}</FormHelperText>}\n              </FormControl>\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Update Student\n            </Button>\n            </form>\n\n          </div>\n        </Fade>\n      </Modal>\n      {updateStudentSuccessModal && <UpdateSuccessModal props={{\n        updateStudentSuccessModal,\n        handleUpdateStudentSuccessModalClose,\n        handleUpdateStudentModalClose\n      }} />}\n    </>\n  )\n}\n\nexport default UpdateModal\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/api/api.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/UpdateSuccessModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/AddSuccessModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/modals/DeleteSuccessModal.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/api/api.js",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/AddModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/AddSuccessModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/UpdateModal.jsx",["221"],"import React from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst UpdateModal = ({ props }) => {\n  const {\n    updateClassModal,\n    updateClass,\n    handleUpdateClassModalClose,\n    nameError,\n    handleFormChangeUpdate,\n    nameErrorMessage,\n    updatedId,\n    nameUpdate\n  } = props\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  }));\n  const classes = useStyles();\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      className={classes.modal}\n      open={updateClassModal}\n      onClose={handleUpdateClassModalClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n  \n      <Fade in={updateClassModal}>\n        <div className={classes.paper}>\n          <Typography style={{ color: \"#3f51b5\" }} variant=\"h4\" component=\"h2\" gutterBottom>\n            Update Class Form\n              </Typography>\n          <form onSubmit={updateClass}>\n            <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={nameError}>\n              <InputLabel htmlFor=\"name\">Name</InputLabel>\n              <Input\n                placeholder=\"e.g. john doe\"\n                type=\"text\"\n                required\n                style={{ width: '100%' }}\n                id=\"name\"\n                value={nameUpdate}\n                onChange={handleFormChangeUpdate}\n                aria-describedby=\"name-text\"\n              />\n              {nameError && <FormHelperText id=\"name-error-text\">{nameErrorMessage}</FormHelperText>}\n            </FormControl>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Update Class\n                </Button>\n          </form>\n\n        </div>\n      </Fade>\n    </Modal>\n  )\n}\n\nexport default UpdateModal","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/DeleteModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/UpdateSuccessModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/modals/DeleteSuccessModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/Row.js",["222"],"import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst TableRows = ({ props }) => {\n\n  const {\n    row,\n    setDeletedId,\n    setDeletedName,\n    setUpdateId,\n    handleDeleteSectionModalOpen,\n    handleUpdateSectionModalOpen,\n\n  } = props;\n\n  const useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }))\n  const classes = useStyles()\n\n  const created = new Date(row.created_at);\n  const updated = new Date(row.updated_at);\n  return (\n    <TableRow key={row.id}>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.name}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.number_of_students}\n      </TableCell>\n      <TableCell style={{ fontSize: 12 }} size=\"small\" align=\"left\">\n        {row.class.name}\n      </TableCell>\n      <TableCell size=\"small\" align=\"left\">\n        {`${created.getFullYear()}-${created.getMonth() + 1}-${created.getDate()}`}\n      </TableCell>\n      <TableCell size=\"small\" align=\"left\">\n        {row.created_at === row.updated_at ? 'never' : `${updated.getFullYear()}-${updated.getMonth() + 1}-${updated.getDate()}`}\n      </TableCell>\n      <TableCell size=\"small\" align=\"left\">\n        <Button\n          onClick={() => {\n            setUpdateId(row.id);\n            handleUpdateSectionModalOpen();\n          }}\n          variant=\"contained\"\n          color=\"default\"\n          className={classes.button}\n          startIcon={<UpdateIcon />}>\n          Update\n                      </Button>\n        <Button\n          onClick={() => {\n            setDeletedId(row.id);\n            setDeletedName(row.name);\n            handleDeleteSectionModalOpen();\n          }}\n          variant=\"contained\"\n          color=\"secondary\"\n          startIcon={<DeleteIcon />}\n          className={classes.button}\n        >\n          Delete\n                      </Button>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nexport default TableRows\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/AddModal.jsx",["223"],"import React, { useState, useEffect } from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getAllClassesApi } from '../../Class/api/api'\nimport { addSectionApi } from '../api/api'\nimport AddSuccessModal from './AddSuccessModal'\n\nconst AddModal = ({ props }) => {\n  const { addSectionModal, handleAddSectionModalClose, setDataChange } = props\n\n  const [addSectionSuccessModal, setAddSectionSuccessModal] = useState(false);\n\n  const handleAddSectionSuccessModalClose = () => {\n    setAddSectionSuccessModal(false);\n  };\n\n  const handleAddSectionSuccessModalOpen = () => {\n    setAddSectionSuccessModal(true);\n  };\n\n  const error = { msg: '', status: false };\n\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(error);\n\n  const [numberOfStudents, setNumberOfStudents] = useState('');\n  const [numberOfStudentsError, setNumberOfStudentsError] = useState(error);\n\n  const [classId, setClassId] = useState('');\n  const [classError, setClassError] = useState(error);\n  const [clases, setClases] = useState([]);\n\n  useEffect(() => {\n    let active = true;\n    (async () => {\n      const data = await getAllClassesApi();\n      if (!active) {\n        return;\n      }\n      setClases(data);\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, []);\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    select: {\n      // margin: theme.spacing(1),\n      marginBottom: 20,\n      minWidth: 120,\n    },\n  }));\n  const classes = useStyles();\n\n  const handleFormChange = e => {\n    e.target.id === \"name\" && setName(e.target.value);\n    e.target.id === \"numb\" && setNumberOfStudents(e.target.value);\n  }\n\n  const handleSelectChange = e => {\n    setClassId(e.target.value);\n  }\n\n  const addSection = async e => {\n    setNameError(error);\n    setNumberOfStudentsError(error);\n    setClassError(error);\n    e.preventDefault();\n    const data = await addSectionApi(name, numberOfStudents,classId);\n    if (data.errors) {\n      if (data.errors.name) {\n        setNameError({ msg: data.errors.name[0], status: true });\n      }\n      if (data.errors.number_of_students) {\n        setNumberOfStudentsError({ msg: data.errors.number_of_students[0], status: true });\n      }\n      if (data.errors.class_id) {\n        setClassError({ msg: \"The class is required\", status: true });\n      }\n      return;\n    }\n    handleAddSectionSuccessModalOpen();\n    setDataChange(prev => !prev);\n  }\n\n  return (\n    <>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={addSectionModal}\n        onClose={handleAddSectionModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={addSectionModal}>\n          <div className={classes.paper}>\n            <Typography style={{ color: \"#3f51b5\" }} variant=\"h4\" component=\"h2\" gutterBottom>\n              Add Section Form\n          </Typography>\n            <form onSubmit={addSection}>\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={nameError.status}>\n                <InputLabel htmlFor=\"name\">Section name</InputLabel>\n                <Input\n                  placeholder=\"e.g. sec\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"name\"\n                  value={name}\n                  onChange={handleFormChange}\n                  aria-describedby=\"fname-text\"\n                />\n                {nameError.status && <FormHelperText id=\"fname-error-text\">{nameError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={numberOfStudentsError.status}>\n                <InputLabel htmlFor=\"numb\">Number of Students</InputLabel>\n                <Input\n                  placeholder=\"e.g. doe\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"numb\"\n                  value={numberOfStudents}\n                  onChange={handleFormChange}\n                  aria-describedby=\"lname-text\"\n                />\n                {numberOfStudentsError.status && <FormHelperText id=\"lname-error-text\">{numberOfStudentsError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl className={classes.select} error={classError.status}\n              >\n                <InputLabel id=\"demo-simple-select-label\">Class</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"section\"\n                  value={classId}\n                  onChange={handleSelectChange}\n                  required\n                >\n                  {clases.map((clas, key) => (\n                    <MenuItem key={key} value={clas.id}>{clas.name}</MenuItem>\n                  ))}\n                </Select>\n                {classError.status && <FormHelperText id=\"section-error-text\">{classError.msg}</FormHelperText>}\n              </FormControl>\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\"\n              style={{ display: 'block' }}>\n                Add Section\n            </Button>\n            </form>\n          </div>\n        </Fade>\n      </Modal>\n      {addSectionSuccessModal && <AddSuccessModal props={{\n        addSectionSuccessModal,\n        handleAddSectionSuccessModalClose,\n        handleAddSectionModalClose\n      }} />}\n    </>\n\n  )\n}\n\nexport default AddModal\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/AddSuccessModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/DeleteModal.jsx",["224"],"import React, { useState } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { deleteSectionApi } from '../api/api'\nimport DeleteSuccessModal from './DeleteSuccessModal'\n\nconst DeleteModal = ({ props }) => {\n\n  const [deleteSectionSuccessModal, setDeleteSectionSuccessModal] = useState(false);\n  const [status, setStatus] = useState('');\n  const handleDeleteSectionSuccessModalOpen = () => {\n    setDeleteSectionSuccessModal(true);\n  };\n\n  const handleDeleteSectionSuccessModalClose = () => {\n    setDeleteSectionSuccessModal(false);\n    handleDeleteSectionModalClose();\n  };\n\n  const {\n    deleteSectionModal,\n    handleDeleteSectionModalClose,\n    deletedId,\n    deletedName,\n    setDataChange,\n    length,\n    setPage\n  } = props;\n\n\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  }));\n  const classes = useStyles();\n\n  const deleteSection = async () => {\n    const data = await deleteSectionApi(deletedId);\n    console.log(data);\n    if (data.message) {\n      setStatus(data.message);\n    }\n    if (length == 1) {\n      setPage(prev => --prev)\n      handleDeleteSectionSuccessModalOpen();\n      return;\n    }\n    setDataChange(prev => !prev);\n    handleDeleteSectionSuccessModalOpen();\n  }\n\n  return (\n    <>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={deleteSectionModal}\n        onClose={handleDeleteSectionModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={deleteSectionModal}>\n          <div className={classes.paper}>\n            <span style={{ marginRight: '10px' }} id=\"transition-modal-description\">Are you sure you want to delete Section <span style={{ fontSize: '1rem', fontWeight: 'bold' }}>{deletedName} </span></span>\n            <Button style={{ marginRight: '10px' }} onClick={deleteSection} variant=\"contained\" color=\"secondary\">\n              Yes\n                </Button>\n            <Button onClick={() => { handleDeleteSectionModalClose() }} variant=\"contained\" color=\"primary\">\n              No\n                </Button>\n          </div>\n        </Fade>\n      </Modal>\n      {deleteSectionSuccessModal && <DeleteSuccessModal props={{\n        deleteSectionSuccessModal,\n        handleDeleteSectionSuccessModalClose,\n        status\n      }} />}\n    </>\n  )\n}\n\nexport default DeleteModal\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/DeleteSuccessModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/UpdateModal.jsx",["225","226","227","228"],"import React, { useState, useEffect } from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Avatar from '@material-ui/core/Avatar';\nimport { getAllClassesApi } from '../../Class/api/api'\nimport { getSectionApi, updateSectionApi } from '../api/api'\nimport UpdateSuccessModal from './UpdateSuccessModal'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ClassTwoTone } from '@material-ui/icons';\n\nconst UpdateModal = ({ props }) => {\n  const {\n    updateSectionModal,\n    handleUpdateSectionModalClose,\n    updateId,\n    setDataChange,\n  } = props\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    select: {\n      // margin: theme.spacing(1),\n      marginBottom: 20,\n      minWidth: 120,\n    },\n    small: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    large: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  }));\n  const classes = useStyles();\n\n  const [updateSectionSuccessModal, setUpdateSectionSuccessModal] = useState(false);\n\n\n  const handleUpdateSectionSuccessModalClose = () => {\n    setUpdateSectionSuccessModal(false);\n  };\n\n  const handleUpdateSectionSuccessModalOpen = () => {\n    setUpdateSectionSuccessModal(true);\n  };\n\n  const error = { msg: '', status: false };\n\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(error);\n\n  const [numberOfStudents, setNumberOfStudents] = useState('');\n  const [numberOfStudentsError, setNumberOfStudentsError] = useState(error);\n\n  const [classId, setClassId] = useState('');\n  const [classError, setClassError] = useState(error);\n\n  const [clases, setClases] = useState([]);\n\n  useEffect(() => {\n    let active = true;\n    (async () => {\n      const data = await getAllClassesApi();\n      const data2 = await getSectionApi(updateId);\n      if (!active) {\n        return;\n      }\n      setClases(data);\n      setName(data2.name);\n      setNumberOfStudents(data2.number_of_students);\n      setClassId(data2.class_id)\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, []);\n\n  const handleFormChange = e => {\n    e.target.id === \"name\" && setName(e.target.value);\n    e.target.id === \"numb\" && setNumberOfStudents(e.target.value);\n  }\n\n  const handleSelectChange = e => {\n    setClassId(e.target.value);\n  }\n\n  const updateSection = async e => {\n    e.preventDefault();\n    setNameError(error);\n    setNumberOfStudentsError(error);\n    setClassError(error);\n    const data = await updateSectionApi(updateId, name, numberOfStudents, classId);\n    if (data.errors) {\n      if (data.errors.name) {\n        setNameError({ msg: data.errors.name[0], status: true });\n      }\n      if (data.errors.number_of_stundents) {\n        setNumberOfStudentsError({ msg: data.errors.number_o_students[0], status: true });\n      }\n      return;\n    }\n    handleUpdateSectionSuccessModalOpen();\n    setDataChange(prev => !prev);\n  }\n\n  return (\n    <>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={updateSectionModal}\n        onClose={handleUpdateSectionModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={updateSectionModal}>\n          <div className={classes.paper}>\n            <Typography style={{ color: \"#3f51b5\" }} variant=\"h4\" component=\"h2\" gutterBottom>\n              Update Section Form\n              </Typography>\n\n            <form onSubmit={updateSection}>\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={nameError.status}>\n                <InputLabel htmlFor=\"name\">Section Name</InputLabel>\n                <Input\n                  placeholder=\"e.g. john\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"name\"\n                  value={name}\n                  onChange={handleFormChange}\n                  aria-describedby=\"fname-text\"\n                />\n                {nameError.status && <FormHelperText id=\"fname-error-text\">{nameError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl style={{ display: 'block', width: '400px', marginBottom: '20px' }} error={numberOfStudentsError.status}>\n                <InputLabel htmlFor=\"numb\">Number Of Students</InputLabel>\n                <Input\n                  placeholder=\"e.g. doe\"\n                  type=\"text\"\n                  required\n                  style={{ width: '100%' }}\n                  id=\"numb\"\n                  value={numberOfStudents}\n                  onChange={handleFormChange}\n                  aria-describedby=\"lname-text\"\n                />\n                {numberOfStudentsError.status && <FormHelperText id=\"lname-error-text\">{numberOfStudentsError.msg}</FormHelperText>}\n              </FormControl>\n\n              <FormControl className={classes.select} error={classError.status}>\n                <InputLabel id=\"demo-simple-select-label\">Class</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"section\"\n                  value={classId}\n                  onChange={handleSelectChange}\n                >\n                  {clases.map((clas, key) => (\n                    <MenuItem key={key} value={clas.id}>{clas.name}</MenuItem>\n                  ))}\n                </Select>\n                {classError.status && <FormHelperText id=\"section-error-text\">{classError.msg}</FormHelperText>}\n              </FormControl>\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Update Section\n            </Button>\n            </form>\n\n          </div>\n        </Fade>\n      </Modal>\n      {updateSectionSuccessModal && <UpdateSuccessModal props={{\n        updateSectionSuccessModal,\n        handleUpdateSectionSuccessModalClose,\n        handleUpdateSectionModalClose\n      }} />}\n    </>\n  )\n}\n\nexport default UpdateModal\n","/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/modals/UpdateSuccessModal.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Class/Search.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Section/Search.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Admin/Search.jsx",[],"/home/dev-huzz/Desktop/LMS-dreamTeam-Frontend/src/components/Student/Search.jsx",[],{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":78,"column":10,"nodeType":"235","messageId":"236","endLine":78,"endColumn":35},{"ruleId":"233","severity":1,"message":"237","line":78,"column":37,"nodeType":"235","messageId":"236","endLine":78,"endColumn":65},{"ruleId":"238","severity":1,"message":"239","line":108,"column":6,"nodeType":"240","endLine":108,"endColumn":24,"suggestions":"241"},{"ruleId":"238","severity":1,"message":"242","line":124,"column":6,"nodeType":"240","endLine":124,"endColumn":24,"suggestions":"243"},{"ruleId":"233","severity":1,"message":"244","line":78,"column":10,"nodeType":"235","messageId":"236","endLine":78,"endColumn":35},{"ruleId":"233","severity":1,"message":"245","line":78,"column":37,"nodeType":"235","messageId":"236","endLine":78,"endColumn":65},{"ruleId":"238","severity":1,"message":"239","line":114,"column":6,"nodeType":"240","endLine":114,"endColumn":24,"suggestions":"246"},{"ruleId":"238","severity":1,"message":"239","line":224,"column":8,"nodeType":"240","endLine":224,"endColumn":26,"suggestions":"247"},{"ruleId":"248","severity":1,"message":"249","line":296,"column":13,"nodeType":"250","messageId":"251","endLine":296,"endColumn":23},{"ruleId":"233","severity":1,"message":"252","line":18,"column":8,"nodeType":"235","messageId":"236","endLine":18,"endColumn":21},{"ruleId":"233","severity":1,"message":"253","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":25},{"ruleId":"233","severity":1,"message":"254","line":29,"column":9,"nodeType":"235","messageId":"236","endLine":29,"endColumn":16},{"ruleId":"233","severity":1,"message":"255","line":30,"column":9,"nodeType":"235","messageId":"236","endLine":30,"endColumn":16},{"ruleId":"233","severity":1,"message":"256","line":11,"column":60,"nodeType":"235","messageId":"236","endLine":11,"endColumn":71},{"ruleId":"257","severity":1,"message":"258","line":53,"column":16,"nodeType":"259","messageId":"251","endLine":53,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":132,"column":22,"nodeType":"259","messageId":"251","endLine":132,"endColumn":24},{"ruleId":"238","severity":1,"message":"260","line":113,"column":6,"nodeType":"240","endLine":113,"endColumn":8,"suggestions":"261"},{"ruleId":"257","severity":1,"message":"258","line":156,"column":22,"nodeType":"259","messageId":"251","endLine":156,"endColumn":24},{"ruleId":"233","severity":1,"message":"262","line":21,"column":5,"nodeType":"235","messageId":"236","endLine":21,"endColumn":14},{"ruleId":"233","severity":1,"message":"253","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":25},{"ruleId":"233","severity":1,"message":"263","line":12,"column":8,"nodeType":"235","messageId":"236","endLine":12,"endColumn":23},{"ruleId":"257","severity":1,"message":"258","line":56,"column":16,"nodeType":"259","messageId":"251","endLine":56,"endColumn":18},{"ruleId":"233","severity":1,"message":"263","line":13,"column":8,"nodeType":"235","messageId":"236","endLine":13,"endColumn":23},{"ruleId":"233","severity":1,"message":"264","line":14,"column":8,"nodeType":"235","messageId":"236","endLine":14,"endColumn":14},{"ruleId":"233","severity":1,"message":"265","line":19,"column":10,"nodeType":"235","messageId":"236","endLine":19,"endColumn":22},{"ruleId":"238","severity":1,"message":"260","line":98,"column":6,"nodeType":"240","endLine":98,"endColumn":8,"suggestions":"266"},"no-native-reassign",["267"],"no-negated-in-lhs",["268"],"no-unused-vars","'updateSectionSuccessModal' is assigned a value but never used.","Identifier","unusedVar","'setUpdateSectionSuccessModal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.","ArrayExpression",["269"],"React Hook React.useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["270"],"'updateStudentSuccessModal' is assigned a value but never used.","'setUpdateStudentSuccessModal' is assigned a value but never used.",["271"],["272"],"no-dupe-keys","Duplicate key 'nameUpdate'.","ObjectExpression","unexpected","'DashboardIcon' is defined but never used.","'useState' is defined but never used.","'created' is assigned a value but never used.","'updated' is assigned a value but never used.","'deleteClass' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has a missing dependency: 'updateId'. Either include it or remove the dependency array.",["273"],"'updatedId' is assigned a value but never used.","'CloudUploadIcon' is defined but never used.","'Avatar' is defined but never used.","'ClassTwoTone' is defined but never used.",["274"],"no-global-assign","no-unsafe-negation",{"desc":"275","fix":"276"},{"desc":"275","fix":"277"},{"desc":"275","fix":"278"},{"desc":"275","fix":"279"},{"desc":"280","fix":"281"},{"desc":"280","fix":"282"},"Update the dependencies array to be: [page, dataChange, search]",{"range":"283","text":"284"},{"range":"285","text":"284"},{"range":"286","text":"284"},{"range":"287","text":"284"},"Update the dependencies array to be: [updateId]",{"range":"288","text":"289"},{"range":"290","text":"289"},[3171,3189],"[page, dataChange, search]",[4292,4310],[3241,3259],[6626,6644],[3268,3270],"[updateId]",[2903,2905]]